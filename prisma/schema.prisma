generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_name    String
  slug            String   @unique(map: "product_slug_idx")
  category_id     String
  category_name   String
  brand_id        String
  brand_name      String
  description     String
  stock           Int
  price           Decimal  @default(0) @db.Decimal(12, 2)
  rating          Decimal  @default(0) @db.Decimal(3, 2)
  numReviews      Int      @default(0)
  banner          String?
  isactive        Boolean? @default(true)
  createdAt       DateTime @default(now()) @db.Timestamp(6)
  OrderItem      OrderItem[]
  ProductImages   ProductImages[]
}

model ProductImages {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @db.Uuid
  src       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name    String?
  last_name     String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isadmin       Boolean?  @default(false)
  isactive      Boolean?  @default(true)
  provider      String?
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?  @updatedAt
  created_by    String?
  updated_by    String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  Order         Order[]
}

model Category {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_name    String
  description      String?
  isactive         Boolean?  @default(true)
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  updatedAt        DateTime? @updatedAt
}

model Brand {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  brand_name      String
  description      String?
  isactive         Boolean?  @default(true)
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  updatedAt        DateTime? @updatedAt
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Order {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String    @db.Uuid
  shippingAddress   Json      @db.Json
  paymentMethod     String
  paymentResult     Json?     @db.Json
  itemsPrice        Decimal   @db.Decimal(12, 2)
  shippingPrice     Decimal   @db.Decimal(12, 2)
  taxPrice          Decimal   @db.Decimal(12, 2)
  totalPrice        Decimal   @db.Decimal(12, 2)
  isPaid            Boolean   @default(false)
  paidAt            DateTime? @db.Timestamp(6)
  isDelivered       Boolean   @default(false)
  deliveredAt       DateTime?  @db.Timestamp(6)
  createdAt         DateTime  @default(now()) @db.Timestamp(6)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitems         OrderItem[]
}

model OrderItem {
  orderId       String  @db.Uuid
  productId     String  @db.Uuid
  quantity      Int
  price         Decimal  @db.Decimal(12, 2)
  product_name  String
  slug          String
  image         String
  order         Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@id([orderId, productId], map:"orderitems_orderId_productId_pk")
}