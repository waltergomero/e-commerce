
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Product {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String          @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal         @default(0) @db.Decimal(12,2)
  rating      Decimal         @default(0) @db.Decimal(3,2)
  numReviews  Int             @default(0)
  isFeatured  Boolean         @default(false)
  banner      String?
  createdAt   DateTime        @default(now()) @db.Timestamp(6)
}

model User {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name    String?
  last_name     String?
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  isadmin       Boolean?        @default(false)
  isactive      Boolean?        @default(true)
  provider      String?
  created_by    String?
  updated_by    String?
  image         String?
  accounts      Account[]
  sessions      Session[] 
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String      @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @updatedAt
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 